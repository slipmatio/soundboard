name: Release
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**.spec.js'
      - '.idea'
      - '.gitignore'
      - '.github/**' # disable temporarily for testing
      - '!.github/workflows/release.yml'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  draft:
    runs-on: ubuntu-latest
    outputs:
      release-note: ${{ steps.release-note.outputs.release-note }}
      version: ${{ steps.version.outputs.build-version }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Get last git tag
        id: tag
        run: echo "::set-output name=last-tag::$(git describe --tags --abbrev=0 || git rev-list --max-parents=0 ${{github.ref}})"

      - name: Generate release notes
        uses: ./.github/actions/release-notes
        id: release-note
        with:
          from: ${{ steps.tag.outputs.last-tag }}
          to: ${{ github.ref }}
          include-commit-body: true
          include-abbreviated-commit: true

      - name: Get version from current date
        id: version
        run: echo "::set-output name=build-version::$(node -e "try{console.log(require('./.electron-builder.config.js').extraMetadata.version)}catch(e){console.error(e);process.exit(1)}")"

      - name: Waiting on All checks
        uses: lewagon/wait-on-check-action@v0.2
        with:
          ref: ${{ github.ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          running-workflow-name: 'draft'

      - name: Delete outdated drafts
        uses: hugo19941994/delete-draft-releases@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          prerelease: true
          draft: true
          tag_name: v${{ steps.version.outputs.build-version }}
          name: v${{ steps.version.outputs.build-version }}
          body: ${{ steps.release-note.outputs.release-note }}

  upload_artifacts:
    needs: [draft]

    strategy:
      matrix:
        os: [macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 16 # Need for npm >=7.7
          cache: 'npm'

      ## Yarn dir
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      ## Cache
      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn2-

      ## Cache
      - name: Cache node_modules
        id: cache-node-modules2
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-

      ## Dependencies
      - name: Install Dependencies
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      # The easiest way to transfer release notes to a compiled application is create `release-notes.md` in the build resources.
      # See https://github.com/electron-userland/electron-builder/issues/1511#issuecomment-310160119
      - name: Prepare release notes
        env:
          RELEASE_NOTE: ${{ needs.draft.outputs.release-note }}
        run: echo "$RELEASE_NOTE" >> ./buildResources/release-notes.md

      - name: Compile & release Electron app (arm64 + x64)
        uses: samuelmeuli/action-electron-builder@v1
        env:
          VITE_APP_VERSION: ${{ needs.draft.outputs.version }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          VITE_PROD_DEBUG: '1'
          SKIP_NOTARIZATION: '1'
        with:
          build_script_name: build
          args: --config .electron-builder.config.js --x64 --arm64

          github_token: ${{ secrets.github_token }}
          release: true
          max_attempts: 2
